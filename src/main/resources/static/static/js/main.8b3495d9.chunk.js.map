{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","columns","title","field","App","retrieveAllUsers","a","axios","get","then","res","console","log","data","setState","message","addUser","user","departCode","tableData","post","headers","err","updateUser","put","deleteUser","delete","state","this","className","src","logo","alt","height","style","padding","maxWidth","icons","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","data1","length","i","push","onRowUpdate","oldData","dataUpdate","id","onRowDelete","dataDelete","index","splice","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8b3495d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, forwardRef } from \"react\";\nimport axios from \"axios\";\nimport MaterialTable from \"material-table\";\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst columns = [\n  { title: 'User Name', field: 'userId' },\n  { title: 'Role', field: 'userRole' },\n  { title: 'Name', field: 'name' },\n  { title: 'Email', field: 'email' },\n  { title: 'Company', field: 'company' }\n];\n\n//const pesistData = 'http://localhost:8080/';\n\nexport default class App extends Component {\n\nconstructor(props) {\n     super(props);\n     this.state = {  data:[]  }\n}\n\n\nasync componentDidMount() {\n    await this.retrieveAllUsers();\n}\n\nretrieveAllUsers = async () => {\n  try {\n      await axios.get('/users')\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n        if (res.data) { this.setState({ data:res.data }); }\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n}\n\naddUser = (user) => {\n  user.departCode = '10';\n  delete user.tableData;\n  let headers: {\n  'Access-Control-Allow-Origin' : '*',\n  'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS' }\n  try {\n      axios.post('/user/add', user, {\n        headers: headers\n        }).then(res => {\n        console.log(res);\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n}\n\nupdateUser = (user) => {\n  user.departCode = '10';\n  delete user.tableData;\n  let headers: {\n  'Access-Control-Allow-Origin' : '*',\n  'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS' }\n  try {\n      axios.put('/user/update', user, {\n        headers: headers\n      }).then(res => {\n        console.log(res);\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n}\n\ndeleteUser = (user) => {\n  console.log('deleteUser',user);\n  let headers: {\n  'Access-Control-Allow-Origin' : '*',\n  'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS' }\n  try {\n      axios.delete('/user/delete',  {data: user}, {\n        headers: headers\n      }\n  ).then(res => {\n        console.log(res);\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n}\n\nrender() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" height=\"10%\" />\n\n        <div style={{  padding: '10px 0px 0px 10px', maxWidth: \"100%\" }}>\n        <MaterialTable\n          icons={tableIcons}\n          title=\"User List\"\n          columns={columns}\n          data={this.state.data}\n          editable={{\n              onRowAdd: newData =>\n                  new Promise((resolve, reject) => {\n                      setTimeout(() => {\n                          let data1 = [];\n                          if(this.state.data && this.state.data.length > 0) {\n                            for(let i=0; i< this.state.data.length; i++)\n                              data1.push(this.state.data[i]);\n                          }\n                          data1.push(newData);\n                          //setData([...data, newData]);\n                          this.setState({ data: data1 });\n                          this.addUser(newData);\n                          resolve();\n                      }, 1000);\n                  }),\n              onRowUpdate: (newData, oldData) =>\n                    new Promise((resolve, reject) => {\n                      setTimeout(() => {\n                          const dataUpdate = [...this.state.data];\n                          const index = oldData.tableData.id;\n                          dataUpdate[index] = newData;\n                          this.updateUser(newData);\n                          resolve();\n                          this.setState({ data: dataUpdate });\n                      }, 1000);\n                  }),\n              onRowDelete: oldData =>\n                  new Promise((resolve, reject) => {\n                      setTimeout(() => {\n                          const dataDelete = [...this.state.data];\n                          const index = oldData.tableData.id;\n                          this.deleteUser(dataDelete[index]);\n                          dataDelete.splice(index, 1);\n                          this.setState({ data: dataDelete });\n                          resolve();\n                      }, 1000);\n                  })\n            }}\n       />\n    </div>\n\n      </header>\n    </div>\n  );\n }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}